// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: documentservice/annex.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Annex struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id         uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	AnnexHash  string `protobuf:"bytes,3,opt,name=annexHash,proto3" json:"annexHash,omitempty"`
	ContractId string `protobuf:"bytes,4,opt,name=contractId,proto3" json:"contractId,omitempty"`
	State      string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Seller     string `protobuf:"bytes,6,opt,name=seller,proto3" json:"seller,omitempty"`
	Buyer      string `protobuf:"bytes,7,opt,name=buyer,proto3" json:"buyer,omitempty"`
	CreateDate string `protobuf:"bytes,8,opt,name=createDate,proto3" json:"createDate,omitempty"`
}

func (m *Annex) Reset()         { *m = Annex{} }
func (m *Annex) String() string { return proto.CompactTextString(m) }
func (*Annex) ProtoMessage()    {}
func (*Annex) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bd2cabf34eecf92, []int{0}
}
func (m *Annex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Annex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Annex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Annex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Annex.Merge(m, src)
}
func (m *Annex) XXX_Size() int {
	return m.Size()
}
func (m *Annex) XXX_DiscardUnknown() {
	xxx_messageInfo_Annex.DiscardUnknown(m)
}

var xxx_messageInfo_Annex proto.InternalMessageInfo

func (m *Annex) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Annex) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Annex) GetAnnexHash() string {
	if m != nil {
		return m.AnnexHash
	}
	return ""
}

func (m *Annex) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *Annex) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Annex) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *Annex) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *Annex) GetCreateDate() string {
	if m != nil {
		return m.CreateDate
	}
	return ""
}

func init() {
	proto.RegisterType((*Annex)(nil), "cosmonaut.documentservice.documentservice.Annex")
}

func init() { proto.RegisterFile("documentservice/annex.proto", fileDescriptor_4bd2cabf34eecf92) }

var fileDescriptor_4bd2cabf34eecf92 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0xe3, 0xd0, 0xa4, 0xf4, 0x0d, 0x0c, 0x16, 0x42, 0x96, 0x40, 0x56, 0xc5, 0x54, 0x96,
	0x64, 0x60, 0x65, 0x01, 0x31, 0xc0, 0xda, 0x81, 0x81, 0xcd, 0x71, 0x9e, 0x68, 0xa4, 0xc6, 0xae,
	0xec, 0x17, 0xd4, 0xfe, 0x05, 0x9f, 0xc5, 0x58, 0x89, 0x85, 0x11, 0x25, 0x3f, 0x82, 0xe2, 0x96,
	0x82, 0xc2, 0x78, 0xce, 0xbb, 0xc9, 0xb5, 0x2e, 0x9c, 0x97, 0x56, 0x37, 0x35, 0x1a, 0xf2, 0xe8,
	0x5e, 0x2b, 0x8d, 0xb9, 0x32, 0x06, 0xd7, 0xd9, 0xca, 0x59, 0xb2, 0xfc, 0x4a, 0x5b, 0x5f, 0x5b,
	0xa3, 0x1a, 0xca, 0x06, 0xb1, 0x21, 0x5f, 0x7e, 0x30, 0x48, 0x6e, 0xfb, 0x4f, 0xb9, 0x80, 0xb1,
	0x76, 0xa8, 0xc8, 0x3a, 0xc1, 0xa6, 0x6c, 0x36, 0x99, 0xff, 0x20, 0x3f, 0x81, 0xb8, 0x2a, 0x45,
	0x3c, 0x65, 0xb3, 0xd1, 0x3c, 0xae, 0x4a, 0x7e, 0x01, 0x93, 0xd0, 0xf6, 0xa0, 0xfc, 0x42, 0x1c,
	0x85, 0xec, 0xaf, 0xe0, 0x12, 0x40, 0x5b, 0x43, 0x4e, 0x69, 0x7a, 0x2c, 0xc5, 0x28, 0x9c, 0xff,
	0x18, 0x7e, 0x0a, 0x89, 0x27, 0x45, 0x28, 0x92, 0x70, 0xda, 0x01, 0x3f, 0x83, 0xd4, 0xe3, 0x72,
	0x89, 0x4e, 0xa4, 0x41, 0xef, 0xa9, 0x4f, 0x17, 0xcd, 0x06, 0x9d, 0x18, 0xef, 0xd2, 0x01, 0x42,
	0x47, 0xff, 0x38, 0xbc, 0xef, 0x7f, 0x74, 0xbc, 0xef, 0x38, 0x98, 0xbb, 0xa7, 0xf7, 0x56, 0xb2,
	0x6d, 0x2b, 0xd9, 0x57, 0x2b, 0xd9, 0x5b, 0x27, 0xa3, 0x6d, 0x27, 0xa3, 0xcf, 0x4e, 0x46, 0xcf,
	0x37, 0x2f, 0x15, 0x2d, 0x9a, 0x22, 0xd3, 0xb6, 0xce, 0x0f, 0x2b, 0xe5, 0xc3, 0x31, 0xd7, 0xff,
	0x0c, 0x6d, 0x56, 0xe8, 0x8b, 0x34, 0xec, 0x7b, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x98,
	0x89, 0xa2, 0x7e, 0x01, 0x00, 0x00,
}

func (m *Annex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Annex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Annex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreateDate) > 0 {
		i -= len(m.CreateDate)
		copy(dAtA[i:], m.CreateDate)
		i = encodeVarintAnnex(dAtA, i, uint64(len(m.CreateDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintAnnex(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintAnnex(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintAnnex(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintAnnex(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AnnexHash) > 0 {
		i -= len(m.AnnexHash)
		copy(dAtA[i:], m.AnnexHash)
		i = encodeVarintAnnex(dAtA, i, uint64(len(m.AnnexHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintAnnex(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintAnnex(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAnnex(dAtA []byte, offset int, v uint64) int {
	offset -= sovAnnex(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Annex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovAnnex(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovAnnex(uint64(m.Id))
	}
	l = len(m.AnnexHash)
	if l > 0 {
		n += 1 + l + sovAnnex(uint64(l))
	}
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovAnnex(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovAnnex(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovAnnex(uint64(l))
	}
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovAnnex(uint64(l))
	}
	l = len(m.CreateDate)
	if l > 0 {
		n += 1 + l + sovAnnex(uint64(l))
	}
	return n
}

func sovAnnex(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAnnex(x uint64) (n int) {
	return sovAnnex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Annex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnnex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Annex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Annex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnnex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnnex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnexHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnnex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnnex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnnexHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnnex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnnex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnnex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnnex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnnex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnnex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnnex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnnex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnnex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnnex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAnnex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnnex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAnnex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnnex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnnex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnnex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnnex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAnnex
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAnnex
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAnnex
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAnnex        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnnex          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAnnex = fmt.Errorf("proto: unexpected end of group")
)
